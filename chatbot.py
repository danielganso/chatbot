from flask import Flask, request, jsonify
import requests
from datetime import datetime

app = Flask(__name__)

# Substitua pelos seus dados
INSTANCE_ID = "3D8D5C2F8DF4907B9157F6819FEED502"
INSTANCE_TOKEN = "78951A9DD9FD29419149549A"
BASE_URL = f"https://api.z-api.io/instances/{INSTANCE_ID}/token/{INSTANCE_TOKEN}"

# Armazena o estado dos usu√°rios
estados_usuarios = {}
atendimentos_encerrados = {}

def send_message(phone, message):
    """Envia uma mensagem de texto simples usando a Z-API."""
    url = f"{BASE_URL}/send-text"
    payload = {
        "phone": phone,
        "message": message
    }
    headers = {
        "Content-Type": "application/json",
        "Client-Token": "F90940ab202714a8d987298388bd01a72S"  # Substitua pelo seu Client-Token
    }
    response = requests.post(url, json=payload, headers=headers)
    print(f"Resposta da API ao enviar mensagem: {response.json()}")  # Log para depura√ß√£o
    return response.json()

def send_button_list(phone, message, buttons):
    """Envia uma mensagem com bot√µes interativos usando a Z-API."""
    url = f"{BASE_URL}/send-button-list"
    payload = {
        "phone": phone,
        "message": message,
        "buttonList": {
            "buttons": buttons
        }
    }
    headers = {
        "Content-Type": "application/json",
        "Client-Token": "F90940ab202714a8d987298388bd01a72S"  # Substitua pelo seu Client-Token
    }
    response = requests.post(url, json=payload, headers=headers)
    print(f"Resposta da API ao enviar bot√µes: {response.json()}")  # Log para depura√ß√£o
    return response.json()

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        data = request.json
        print(f"Dados recebidos: {data}")

        # Captura os campos necess√°rios do JSON
        phone = data.get("phone")
        text = data.get("text", {}).get("message", "").strip()
        button_id = data.get("buttonResponse", {}).get("id", "").strip()  # Captura o ID do bot√£o
        today = datetime.now().strftime("%Y-%m-%d")

        # Prioriza o ID do bot√£o, se ele existir
        if button_id:
            text = button_id

        if not phone or not text:
            return jsonify({"error": "Dados inv√°lidos ou incompletos"}), 400

        # Verifica se o atendimento j√° foi encerrado para este n√∫mero no dia
        if atendimentos_encerrados.get(phone) == today:
            print(f"Atendimento encerrado para {phone} hoje. Ignorando mensagem.")
            return jsonify({"status": "ignored"}), 200

        # Gerenciamento de estados
        if estados_usuarios.get(phone) == "aguardando_orcamento":
            if text == "sim_concluir":
                send_message(phone, "Obrigado pelas informa√ß√µes! Logo voc√™ receber√° seu or√ßamento! üòä")
                estados_usuarios.pop(phone, None)  # Remove o estado do usu√°rio
                atendimentos_encerrados[phone] = today
                return jsonify({"status": "success"}), 200

            elif text == "nao_enviando":
                send_message(phone, "Favor enviar todas as informa√ß√µes de uma s√≥ vez para agilizar seu atendimento.")
                return jsonify({"status": "success"}), 200

            else:
                send_message(phone, "Continuando o envio das informa√ß√µes. Envie mais detalhes ou clique em 'Sim Concluir' para finalizar.")
                return jsonify({"status": "success"}), 200

        # Menu principal
        if text.lower() in ["oi", "ol√°", "ola", "bom dia", "boa tarde", "boa noite"]:
            welcome_message = (
                "Ol√°, tudo bem?\n"
                "Que prazer te ter por aqui! ü§©\n\n"
                "Para agilizar seu atendimento vou te direcionar a algumas op√ß√µes:\n\n"
                "üìå *1* - Gostaria de um or√ßamento ‚úçÔ∏è\n"
                "üìå *2* - Quero saber promo√ß√µes prontas ‚òëÔ∏è\n"
                "üìå *3* - Receber ofertas diretamente pelo WhatsApp üì®\n"
                "üìå *4* - Falar com um atendente üë©‚Äçüíª"
            )
            send_message(phone, welcome_message)

        # Op√ß√£o 1 - Solicita informa√ß√µes para or√ßamento
        elif text == "1":
            info_message = (
                "Preciso que me passe essas informa√ß√µes abaixo:\n"
                "- Seu nome;\n"
                "- Destino que quer o or√ßamento;\n"
                "- Data do or√ßamento;\n"
                "- Quantidade de pessoas (se tiver crian√ßa, preciso tamb√©m da idade).\n\n"
                "Obs: Se for mais de um apartamento, informe a quantidade de pessoas e as idades das crian√ßas para cada quarto! ‚úçÔ∏è"
            )
            send_message(phone, info_message)

            buttons = [
                {"id": "sim_concluir", "label": "Sim, Concluir"},
                {"id": "nao_enviando", "label": "N√£o, Ainda Estou Enviando"}
            ]
            estados_usuarios[phone] = "aguardando_orcamento"
            send_button_list(
                phone,
                message="J√° enviou todas as informa√ß√µes? Escolha uma op√ß√£o abaixo:",
                buttons=buttons
            )

        # Op√ß√£o 2 - Envia o link do Instagram
        elif text == "2":
            option_2_message = (
                "D√° uma olhada no nosso destaque do Instagram üëá\n"
                "(Incluir aqui o link do destaque)\n\n"
                "Estamos sempre atualizando, mas confirme disponibilidade, pois a rotatividade √© grande!"
            )
            send_message(phone, option_2_message)

        # Op√ß√£o 3 - Adiciona √† lista de transmiss√£o
        elif text == "3":
            option_3_message = (
                "J√° iremos adicionar seu n√∫mero √† nossa lista de transmiss√£o!\n\n"
                "Por favor, adicione nosso contato √† sua agenda para receber as ofertas diretamente pelo WhatsApp! üòÑ‚úàÔ∏è"
            )
            send_message(phone, option_3_message)

        # Op√ß√£o 4 ou "Falar com Atendente"
        elif text == "4" or text.lower() == "falar com atendente":
            atendimentos_encerrados[phone] = today
            send_message(phone, "Um atendente ir√° falar com voc√™. O chatbot est√° encerrado para hoje.")
            return jsonify({"status": "success"}), 200

        else:
            default_message = "Desculpe, n√£o entendi sua mensagem. Por favor, escolha uma das op√ß√µes enviando o n√∫mero correspondente (1, 2, 3 ou 4)."
            send_message(phone, default_message)

        return jsonify({"status": "success"}), 200

    except Exception as e:
        print(f"Erro no webhook: {e}")
        return jsonify({"error": "Erro interno no servidor"}), 500

import os

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))  # Usa a porta definida pelo Render ou 5000 como fallback
    app.run(host='0.0.0.0', port=port)
