Request URL
https://login.intranet.bb.com.br/sso/oauth2/authorize?response_type=code&client_id=superfeira&redirect_uri=https%3A%2F%2Fsuperfeira.intranet.bb.com.br%2Fauth%2Fcallback%2Fbb&scope=bbprofile
Request Method
GET
Status Code
302 Found
Remote Address
172.17.78.118:443
Referrer Policy
strict-origin-when-cross-origin

Request URL
https://login.intranet.bb.com.br/sso/oauth2/authorize?response_type=code&client_id=superfeira&redirect_uri=https%3A%2F%2Fsuperfeira.intranet.bb.com.br%2Fauth%2Fcallback%2Fbb&scope=bbprofile
Request Method
GET
Status Code
302 Found
Remote Address
172.17.78.118:443
Referrer Policy
strict-origin-when-cross-origin

superfeira.intranet.bb.com.br redirected you too many times.

Erro no callback: error:1E08010C:DECODER routines::unsupported

openssl pkcs12 -in seu_certificado.pfx -nocerts -out chave.key -nodes
openssl pkcs12 -in seu_certificado.pfx -clcerts -nokeys -out certificado.crt

res.cookie('session', sessionToken, { httpOnly: true, secure: true });
res.redirect('/');


Request URL
https://superfeira.intranet.bb.com.br/sso/oauth2/authorize?response_type=code&client_id=superfeira&redirect_uri=https%3A%2F%2Fsuperfeira.intranet.bb.com.br%2Fauth%2Fcallback&scope=bbprofile
Request Method
GET
Status Code
302 Found
Remote Address
10.2.99.16:443
Referrer Policy
strict-origin-when-cross-origin

<configuration>
  <system.webServer>
    <rewrite>
      <rules>
        <rule name="ReverseProxyToNode" stopProcessing="true">
          <match url=".*" />
          <conditions logicalGrouping="MatchAll">
            <!-- Só proxyar se não for um arquivo físico -->
            <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
            <!-- Só proxyar se não for uma pasta física -->
            <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />
          </conditions>
          <action type="Rewrite" url="http://localhost:3000/{R:1}" />
        </rule>
      </rules>
    </rewrite>
  </system.webServer>
</configuration>

<configuration>
  <system.webServer>
    <rewrite>
      <rules>
        <rule name="ReverseProxyToNode" stopProcessing="true">
          <match url="(.*)" />
          <action type="Rewrite" url="http://localhost:3000/{R:1}" />
        </rule>
      </rules>
    </rewrite>
  </system.webServer>
</configuration>

https://superfeira.intranet.bb.com.br/sso/oauth2/authorize?response_type=code&client_id=superfeira&redirect_uri=https%3A%2F%2Fsuperfeira.intranet.bb.com.br%2Fauth%2Fcallback&scope=bbprofile

// test-server.js
const express = require('express');
const app = express();
const PORT = 3000;

app.get('*', (req, res) => {
  res.send(`🚀 Está funcionando! Rota acessada: ${req.originalUrl}`);
});

app.listen(PORT, () => {
  console.log(`Servidor de teste rodando em http://localhost:${PORT}`);
});


1111111111111111111111111111111111111
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'; // <--- IGNORA O CERTIFICADO
const express = require('express');
const axios = require('axios');
const path = require('path');
const cookieSession = require('cookie-session');
require('dotenv').config();

const app = express();
const PORT = 3000;

// Permite o Express funcionar corretamente atrás do IIS (evita erro no hostname)
app.set('trust proxy', true);

// ======= CONFIGURAÇÕES =========
const CLIENT_ID = process.env.CLIENT_ID;
const CLIENT_SECRET = process.env.CLIENT_SECRET;
const REDIRECT_URI = process.env.REDIRECT_URI;

const AUTH_BASE_URL = 'https://login.intranet.bb.com.br';
const AUTH_URL = `${AUTH_BASE_URL}/sso/oauth2/authorize`;
const TOKEN_URL = `${AUTH_BASE_URL}/sso/oauth2/access_token`;
const USERINFO_URL = `${AUTH_BASE_URL}/sso/oauth2/userinfo`;


// ======= SESSÃO VIA COOKIE ========
app.use(
  cookieSession({
    name: 'session',
    keys: ['chave-super-secreta-aqui'],
    maxAge: 24 * 60 * 60 * 1000, // 1 dia
    secure: true,
    sameSite: 'lax',
  })
);

// ======= ROTA PRINCIPAL ===========
app.get('/', async (req, res) => {
  if (req.session?.user) {
    // Se autenticado, mostra o index
    return res.sendFile(path.join(__dirname, 'dist', 'index.html'));
  }

  // Redireciona para o login do BB
  const authUrl = `${AUTH_URL}?response_type=code&client_id=${CLIENT_ID}&redirect_uri=${encodeURIComponent(REDIRECT_URI)}&scope=bbprofile`;
  return res.redirect(authUrl);
});

// ======= CALLBACK DO OAUTH2 =========
app.get('/auth/callback', async (req, res) => {
  const code = req.query.code;

  if (!code) {
    return res.status(400).send('Código de autenticação ausente.');
  }

  try {
    const authHeader = Buffer.from(`${CLIENT_ID}:${CLIENT_SECRET}`).toString('base64');

    const tokenResponse = await axios.post(
      TOKEN_URL,
      new URLSearchParams({
        code,
        grant_type: 'authorization_code',
        redirect_uri: REDIRECT_URI,
      }),
      {
        headers: {
          Authorization: `Basic ${authHeader}`,
          'Content-Type': 'application/x-www-form-urlencoded',
        },
      }
    );

    const accessToken = tokenResponse.data.access_token;

    // Pega os dados do usuário logado
    const userInfo = await axios.get(USERINFO_URL, {
      headers: { Authorization: `Bearer ${accessToken}` },
    });

    // Salva os dados na sessão
    req.session.user = userInfo.data;

    return res.redirect('/');
  } catch (error) {
    console.error('Erro no callback:', error.response?.data || error.message);
    return res.status(500).send('Erro na autenticação OAuth2.');
  }
});

// ======= BLOQUEIA ACESSOS SEM LOGIN =======
app.use((req, res, next) => {
  if (req.session?.user) {
    return next();
  }

  // Redireciona para login se tentar acessar outros arquivos sem sessão
  const authUrl = `${AUTH_URL}?response_type=code&client_id=${CLIENT_ID}&redirect_uri=${encodeURIComponent(REDIRECT_URI)}&scope=bbprofile`;
  return res.redirect(authUrl);
});

// ======= SERVE OS ARQUIVOS ESTÁTICOS =========
app.use(express.static(path.join(__dirname, 'dist')));

// ======= INICIA O SERVIDOR =========
app.listen(PORT, () => {
  console.log(`Servidor rodando em http://localhost:${PORT}`);
});




=================================================================================================================================================
const express = require('express');
const axios = require('axios');
const path = require('path');
const cookieSession = require('cookie-session');
require('dotenv').config();

const app = express();
const PORT = 3000;

// Permite o Express funcionar atrás do IIS corretamente
app.set('trust proxy', true);

// ======= CONFIGURAÇÕES DO OAUTH =========
const CLIENT_ID = process.env.CLIENT_ID;
const CLIENT_SECRET = process.env.CLIENT_SECRET;
const REDIRECT_URI = process.env.REDIRECT_URI;

const AUTH_BASE_URL = 'https://login.intranet.bb.com.br';
const AUTH_URL = `${AUTH_BASE_URL}/sso/oauth2/authorize`;
const TOKEN_URL = `${AUTH_BASE_URL}/sso/oauth2/access_token`;
const USERINFO_URL = `${AUTH_BASE_URL}/sso/oauth2/userinfo`;

// ===== HTTPS AGENT COM CERTIFICADO CLIENTE =====
const agenteHttps = new https.Agent({
  cert: fs.readFileSync(path.join(__dirname, 'certs', 'certificado.crt')), // certificado cliente
  key: fs.readFileSync(path.join(__dirname, 'certs', 'chave.key')),         // chave privada
  ca: fs.readFileSync(path.join(__dirname, 'certs', 'cadeia-bb.pem')),      // cadeia de confiança do BB (opcional)
  rejectUnauthorized: true, // garante que o certificado do servidor também é verificado
});

// ======= CONFIGURAÇÃO DE COOKIE DE SESSÃO =========
app.use(
  cookieSession({
    name: 'session',
    keys: ['chave-super-secreta-aqui'], // troque por uma chave segura real
    maxAge: 24 * 60 * 60 * 1000, // 1 dia
    secure: true, // só HTTPS
    sameSite: 'lax',
  })
);

// ======= ROTA PRINCIPAL ===========
app.get('/', (req, res) => {
  if (req.session?.user) {
    return res.sendFile(path.join(__dirname, 'dist', 'index.html'));
  }

  const authUrl = `${AUTH_URL}?response_type=code&client_id=${CLIENT_ID}&redirect_uri=${encodeURIComponent(REDIRECT_URI)}&scope=bbprofile`;
  return res.redirect(authUrl);
});

// ======= CALLBACK DO BB OAUTH ===========
app.get('/auth/callback/bb', async (req, res) => {
  const code = req.query.code;

  if (!code) {
    return res.status(400).send('Código de autenticação ausente.');
  }

  try {
    const authHeader = Buffer.from(`${CLIENT_ID}:${CLIENT_SECRET}`).toString('base64');

    const tokenResponse = await axios.post(
      TOKEN_URL,
      new URLSearchParams({
        code,
        grant_type: 'authorization_code',
        redirect_uri: REDIRECT_URI,
      }),
      {
        headers: {
          Authorization: `Basic ${authHeader}`,
          'Content-Type': 'application/x-www-form-urlencoded',
        },
      }
    );

    const accessToken = tokenResponse.data.access_token;

    const userInfo = await axios.get(USERINFO_URL, {
      headers: { Authorization: `Bearer ${accessToken}` },
    });

    // Salva os dados do usuário na sessão
    req.session.user = userInfo.data;

    return res.redirect('/');
  } catch (error) {
    console.error('Erro no callback OAuth2:', error.response?.data || error.message);
    return res.status(500).send('Erro na autenticação OAuth2.');
  }
});

// ======= BLOQUEIO GLOBAL PARA USUÁRIOS NÃO AUTENTICADOS =======
app.use((req, res, next) => {
  if (req.session?.user) return next();

  const authUrl = `${AUTH_URL}?response_type=code&client_id=${CLIENT_ID}&redirect_uri=${encodeURIComponent(REDIRECT_URI)}&scope=bbprofile`;
  return res.redirect(authUrl);
});

// ======= ARQUIVOS ESTÁTICOS =========
app.use(express.static(path.join(__dirname, 'dist')));

// ======= INICIA O SERVIDOR =========
app.listen(PORT, () => {
  console.log(`Servidor rodando em http://localhost:${PORT}`);
});

1234132423413241312523513241255============================================================3453425234==========================================================4562625==========

const express = require('express');
const axios = require('axios');
const path = require('path');
const fs = require('fs');
const https = require('https');
const cookieSession = require('cookie-session');
require('dotenv').config();

const app = express();
const PORT = 3000;

// ========== CERTIFICADOS PARA HTTPS NA INTRANET ==========
const agenteHttps = new https.Agent({
  ca: fs.readFileSync(path.join(__dirname, 'certs', 'bb-root.crt')), // Substitua pelo nome real do seu .crt
  rejectUnauthorized: false, // Apenas se necessário no ambiente interno
});

// ========== VARIÁVEIS DE AMBIENTE ==========
const CLIENT_ID = process.env.CLIENT_ID;
const CLIENT_SECRET = process.env.CLIENT_SECRET;
const REDIRECT_URI = 'https://superfeira.intranet.bb.com.br/auth/callback/bb';

const AUTH_BASE_URL = 'https://login.intranet.bb.com.br';
const AUTH_URL = `${AUTH_BASE_URL}/sso/oauth2/authorize`;
const TOKEN_URL = `${AUTH_BASE_URL}/sso/oauth2/access_token`;
const USERINFO_URL = `${AUTH_BASE_URL}/sso/oauth2/userinfo`;

// ========== CONFIGURAÇÃO DE COOKIES ==========
app.set('trust proxy', true); // necessário se usa proxy reverso (como IIS)
app.use(
  cookieSession({
    name: 'session',
    keys: ['chave-super-secreta'],
    maxAge: 24 * 60 * 60 * 1000, // 1 dia
    secure: true,
    sameSite: 'lax',
  })
);

// ========== ROTA PRINCIPAL ==========
app.get('/', (req, res) => {
  if (req.session?.user) {
    return res.sendFile(path.join(__dirname, 'dist', 'index.html'));
  }

  const authUrl = `${AUTH_URL}?response_type=code&client_id=${CLIENT_ID}&redirect_uri=${encodeURIComponent(REDIRECT_URI)}&scope=bbprofile`;
  return res.redirect(authUrl);
});

// ========== CALLBACK OAUTH2 ==========
app.get('/auth/callback/bb', async (req, res) => {
  const code = req.query.code;

  if (!code) {
    return res.status(400).send('Código de autenticação ausente.');
  }

  try {
    const authHeader = Buffer.from(`${CLIENT_ID}:${CLIENT_SECRET}`).toString('base64');

    const tokenResponse = await axios.post(
      TOKEN_URL,
      new URLSearchParams({
        code,
        grant_type: 'authorization_code',
        redirect_uri: REDIRECT_URI,
      }),
      {
        headers: {
          Authorization: `Basic ${authHeader}`,
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        httpsAgent: agenteHttps,
      }
    );

    const accessToken = tokenResponse.data.access_token;

    const userInfo = await axios.get(USERINFO_URL, {
      headers: { Authorization: `Bearer ${accessToken}` },
      httpsAgent: agenteHttps,
    });

    req.session.user = userInfo.data;

    return res.redirect('/');
  } catch (error) {
    console.error('Erro no callback OAuth2:', error.response?.data || error.message);
    return res.status(500).send('Erro ao autenticar com o Banco do Brasil.');
  }
});

// ========== BLOQUEIO DE ACESSO SEM LOGIN ==========
app.use((req, res, next) => {
  if (req.session?.user) return next();

  const authUrl = `${AUTH_URL}?response_type=code&client_id=${CLIENT_ID}&redirect_uri=${encodeURIComponent(REDIRECT_URI)}&scope=bbprofile`;
  return res.redirect(authUrl);
});

// ========== ARQUIVOS ESTÁTICOS ==========
app.use(express.static(path.join(__dirname, 'dist')));

// ========== INÍCIO DO SERVIDOR ==========
app.listen(PORT, () => {
  console.log(`Servidor rodando em http://localhost:${PORT}`);
});


