require('dotenv').config();
const express = require('express');
const axios = require('axios');
const https = require('https');
const fs = require('fs');
const path = require('path');
const qs = require('qs');

const app = express();
const port = process.env.PORT || 3000;

// === HTTPS Agent com o certificado raiz ===
const caCertPath = path.resolve(__dirname, 'certs', 'bb-root.crt');
const ca = fs.readFileSync(caCertPath);
const httpsAgent = new https.Agent({
  ca,
  rejectUnauthorized: true
});

// === URLs e credenciais do BB ===
const authUrl = 'https://login.intranet.bb.com.br/sso/oauth2/authorize';
const tokenUrl = 'https://login.intranet.bb.com.br/sso/oauth2/access_token';
const userInfoUrl = 'https://login.intranet.bb.com.br/sso/oauth2/userinfo';

const clientId = process.env.CLIENT_ID;
const clientSecret = process.env.CLIENT_SECRET;
const redirectUri = process.env.REDIRECT_URI;
const scope = 'bbprofile'; // escopo conforme seu ambiente

// === Página inicial protegida ===
app.get('/', (req, res) => {
  res.send('<a href="/login">Entrar com BB</a>');
});

// === Redireciona para o login BB ===
app.get('/login', (req, res) => {
  const authQuery = new URLSearchParams({
    response_type: 'code',
    client_id: clientId,
    redirect_uri: redirectUri,
    scope,
  }).toString();

  res.redirect(`${authUrl}?${authQuery}`);
});

// === Callback do BB ===
app.get('/auth/callback/bb', async (req, res) => {
  const { code } = req.query;

  if (!code) {
    return res.status(400).send('Código de autorização ausente.');
  }

  try {
    // === Troca o code pelo token ===
    const tokenResponse = await axios.post(tokenUrl, qs.stringify({
      grant_type: 'authorization_code',
      code,
      redirect_uri: redirectUri,
    }), {
      httpsAgent,
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Authorization': 'Basic ' + Buffer.from(`${clientId}:${clientSecret}`).toString('base64'),
      }
    });

    const accessToken = tokenResponse.data.access_token;

    // === Consulta o userinfo ===
    const userInfoResponse = await axios.post(userInfoUrl, null, {
      httpsAgent,
      headers: {
        Authorization: `Bearer ${accessToken}`,
      }
    });

    const userInfo = userInfoResponse.data;
    res.send(`<h1>Autenticado com sucesso!</h1><pre>${JSON.stringify(userInfo, null, 2)}</pre>`);

  } catch (err) {
    console.error('Erro no fluxo OAuth2:', err.message);
    res.status(500).send('Erro ao autenticar com o BB: ' + err.message);
  }
});

app.listen(port, () => {
  console.log(`Servidor rodando em http://localhost:${port}`);
});

























npm install express express-session dotenv axios cors querystring
https://superfeira.intranet.bb.com.br/auth/callback/bb?code=yzRMfkppHY3CEMlUZZDTBR5XycA&iss=https%3A%2F%2Flogin.intranet.bb.com.br%3A443%2Fsso%2Foauth2&client_id=superfeira

// ⚠️ Use com cautela: apenas para ambiente interno
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';

require('dotenv').config();
const express = require('express');
const session = require('express-session');
const axios = require('axios');
const https = require('https');
const qs = require('querystring');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// Sessão em memória (para produção, use Redis/memcached)
app.use(session({
  secret: 'segredo_super_secreto',
  resave: false,
  saveUninitialized: true
}));

// Agente HTTPS para aceitar certificados da intranet (pode usar CA se preferir)
const httpsAgent = new https.Agent({
  rejectUnauthorized: false // ⚠️ Aceita certificados autoassinados
});

// Página principal
app.get('/', (req, res) => {
  if (!req.session.userinfo) {
    return res.redirect('/login');
  }

  res.send(`
    <h1>Bem-vindo, ${req.session.userinfo.name}</h1>
    <p>CPF: ${req.session.userinfo.cpf}</p>
    <a href="/logout">Sair</a>
  `);
});

// Login OAuth2 - BB
app.get('/login', (req, res) => {
  const authUrl = `https://login.intranet.bb.com.br/sso/oauth2/authorize?` +
    qs.stringify({
      response_type: 'code',
      client_id: process.env.CLIENT_ID,
      redirect_uri: process.env.REDIRECT_URI,
      scope: 'bbprofile'
    });

  res.redirect(authUrl);
});

// Callback do OAuth2
app.get('/auth/callback/bb', async (req, res) => {
  const code = req.query.code;

  if (!code) {
    return res.status(400).send('Código de autorização ausente.');
  }

  try {
    // Troca o código pelo token
    const tokenResponse = await axios.post(
      'https://login.intranet.bb.com.br/sso/oauth2/access_token',
      qs.stringify({
        grant_type: 'authorization_code',
        code,
        redirect_uri: process.env.REDIRECT_URI
      }),
      {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Authorization': 'Basic ' + Buffer.from(`${process.env.CLIENT_ID}:${process.env.CLIENT_SECRET}`).toString('base64')
        },
        httpsAgent
      }
    );

    const accessToken = tokenResponse.data.access_token;

    // Requisição ao userinfo
    const userInfoResponse = await axios.post(
      'https://login.intranet.bb.com.br/sso/oauth2/userinfo',
      {},
      {
        headers: {
          Authorization: `Bearer ${accessToken}`
        },
        httpsAgent
      }
    );

    req.session.userinfo = userInfoResponse.data;
    res.redirect('/');
  } catch (error) {
    console.error('Erro ao autenticar:', error.response?.data || error.message);
    res.status(500).send('Erro na autenticação.');
  }
});

// Logout
app.get('/logout', (req, res) => {
  req.session.destroy(() => {
    res.redirect('/login');
  });
});

// Arquivos estáticos (frontend)
app.use(express.static(path.join(__dirname, 'public')));

// Inicialização
app.listen(PORT, () => {
  console.log(`Servidor rodando em http://localhost:${PORT}`);
});




































<configuration>
  <system.webServer>

    <iisnode nodeProcessCommandLine="C:\Program Files\nodejs\node.exe" />

    <handlers>
      <add name="iisnode" path="server.js" verb="*" modules="iisnode" />
    </handlers>

    <rewrite>
      <rules>
        <rule name="NodeJsRule" stopProcessing="true">
          <match url=".*" />
          <action type="Rewrite" url="server.js" />
        </rule>
      </rules>
    </rewrite>
  </system.webServer>
</configuration>
======================

app.get('/callback', async (req, res) => {
  const code = req.query.code;

  console.log('Callback recebido. Code:', code);  // <--- log novo

  if (!code) {
    console.warn('Código de autorização ausente.');
    return res.status(400).send('Código de autorização ausente.');
  }

  try {
    console.log('Trocando código por token...');

    const tokenResponse = await axios.post(
      'https://login.intranet.bb.com.br/sso/oauth2/access_token',
      qs.stringify({
        grant_type: 'authorization_code',
        code,
        redirect_uri: process.env.REDIRECT_URI
      }),
      {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Authorization': 'Basic ' + Buffer.from(`${process.env.CLIENT_ID}:${process.env.CLIENT_SECRET}`).toString('base64')
        }
      }
    );

    const accessToken = tokenResponse.data.access_token;
    console.log('Access token recebido com sucesso.');

    console.log('Buscando dados do usuário...');
    const userInfoResponse = await axios.post(
      'https://login.intranet.bb.com.br/sso/oauth2/userinfo',
      {},
      {
        headers: {
          Authorization: `Bearer ${accessToken}`
        }
      }
    );

    console.log('Dados do usuário recebidos:', userInfoResponse.data);

    req.session.userinfo = userInfoResponse.data;
    res.redirect('/');
  } catch (error) {
    console.error('Erro na autenticação:', error.response?.data || error.message);
    res.status(500).send('Erro na autenticação.');
  }
});

===================

require('dotenv').config();
const express = require('express');
const axios = require('axios');
const qs = require('querystring');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// Sessão simples em memória (substitua por Redis em produção se necessário)
const session = require('express-session');
app.use(session({
  secret: 'segredo_super_secreto',
  resave: false,
  saveUninitialized: true
}));

// Ponto de entrada da aplicação
app.get('/', (req, res) => {
  if (!req.session.userinfo) {
    return res.redirect('/login');
  }

  res.send(`
    <h1>Bem-vindo, ${req.session.userinfo.name}</h1>
    <p>CPF: ${req.session.userinfo.cpf}</p>
    <a href="/logout">Sair</a>
  `);
});

// Redireciona para o login OAuth2 do BB
app.get('/login', (req, res) => {
  const authUrl = `https://login.intranet.bb.com.br/sso/oauth2/authorize?` +
    qs.stringify({
      response_type: 'code',
      client_id: process.env.CLIENT_ID,
      redirect_uri: process.env.REDIRECT_URI,
      scope: 'openid bbprofile email',
    });

  res.redirect(authUrl);
});

// Callback do OAuth2
app.get('/callback', async (req, res) => {
  const code = req.query.code;

  if (!code) {
    return res.status(400).send('Código de autorização ausente.');
  }

  try {
    // Troca o código por um access_token
    const tokenResponse = await axios.post(
      'https://login.intranet.bb.com.br/sso/oauth2/access_token',
      qs.stringify({
        grant_type: 'authorization_code',
        code,
        redirect_uri: process.env.REDIRECT_URI
      }),
      {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Authorization': 'Basic ' + Buffer.from(`${process.env.CLIENT_ID}:${process.env.CLIENT_SECRET}`).toString('base64')
        }
      }
    );

    const accessToken = tokenResponse.data.access_token;

    // Busca dados do usuário com o access_token
    const userInfoResponse = await axios.post(
      'https://login.intranet.bb.com.br/sso/oauth2/userinfo',
      {},
      {
        headers: {
          Authorization: `Bearer ${accessToken}`
        }
      }
    );

    // Armazena os dados do usuário na sessão
    req.session.userinfo = userInfoResponse.data;

    res.redirect('/');
  } catch (error) {
    console.error('Erro ao autenticar:', error.response?.data || error.message);
    res.status(500).send('Erro na autenticação.');
  }
});

// Logout e limpeza de sessão
app.get('/logout', (req, res) => {
  req.session.destroy(() => {
    res.redirect('/login');
  });
});

// Servir arquivos estáticos do frontend, se necessário
app.use(express.static(path.join(__dirname, 'public')));

app.listen(PORT, () => {
  console.log(`Servidor rodando em http://localhost:${PORT}`);
});

====================
<configuration>
  <system.webServer>
    <iisnode nodeProcessCommandLine="C:\Program Files\nodejs\node.exe" />

    <handlers>
      <add name="iisnode" path="server.js" verb="*" modules="iisnode" />
    </handlers>

    <rewrite>
      <rules>
        <rule name="NodeJsRule" stopProcessing="true">
          <match url=".*" />
          <action type="Rewrite" url="server.js" preserveQueryString="true" />
        </rule>
      </rules>
    </rewrite>
  </system.webServer>
</configuration>

