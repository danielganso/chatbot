
nao apagar

<configuration>
  <system.webServer>
    <!-- Aponta explicitamente o executável do Node.js -->
    <iisnode nodeProcessCommandLine="C:\Program Files\nodejs\node.exe" />
    <!-- Define o manipulador para o IIS chamar o iisnode -->
    <handlers>
      <add name="iisnode" path="server.js" verb="" modules="iisnode" />
    </handlers>
    <!-- Reescreve todas as requisições para server.js -->
    <rewrite>
      <rules>
        <rule name="NodeJsRule" stopProcessing="true">
          <match url="." />
          <action type="Rewrite" url="server.js" />
        </rule>
      </rules>
    </rewrite>
    <!-- Opcional, mas ajuda se usar arquivos estáticos -->
    <defaultDocument>
      <files>
        <add value="index.html" />
      </files>
    </defaultDocument>
  </system.webServer>
</configuration>

=====================

const express = require('express');
const axios = require('axios');
const path = require('path');
const cookieSession = require('cookie-session');
require('dotenv').config();
const app = express();
// Porta fornecida pelo IISNode (fallback para local)
const PORT = process.env.PORT || 3000;
app.set('trust proxy', true);
// Configurações do OAuth2
const CLIENT_ID = process.env.CLIENT_ID;
const CLIENT_SECRET = process.env.CLIENT_SECRET;
const REDIRECT_URI = process.env.REDIRECT_URI;
const AUTH_BASE_URL = 'https://login.intranet.bb.com.br';
const AUTH_URL = `${AUTH_BASE_URL}/sso/oauth2/authorize`;
const TOKEN_URL = `${AUTH_BASE_URL}/sso/oauth2/access_token`;
const USERINFO_URL = `${AUTH_BASE_URL}/sso/oauth2/userinfo`;
app.use(
  cookieSession({
    name: 'session',
    keys: ['chave-super-secreta'],
    maxAge: 24 * 60 * 60 * 1000,
    secure: true,
    sameSite: 'lax',
  })
);

// Callback OAuth2 - SEM proteção
app.get('/auth/callback/bb', async (req, res) => {
  const code = req.query.code;
  if (!code) {
    return res.status(400).send('Código de autenticação ausente.');
  }
  try {
    const authHeader = Buffer.from(`${CLIENT_ID}:${CLIENT_SECRET}`).toString('base64');
    const tokenResponse = await axios.post(
      TOKEN_URL,
      new URLSearchParams({
        code,
        grant_type: 'authorization_code',
        redirect_uri: REDIRECT_URI,
      }),
      {
        headers: {
          Authorization: `Basic ${authHeader}`,
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        httpsAgent: new (require('https').Agent)({ rejectUnauthorized: false })
      }
    );
    const accessToken = tokenResponse.data.access_token;
    const userInfo = await axios.get(USERINFO_URL, {
      headers: { Authorization: `Bearer ${accessToken}` },
      httpsAgent: new (require('https').Agent)({ rejectUnauthorized: false }),
    });
    req.session.user = userInfo.data;
    return res.redirect('/');
  } catch (error) {
    console.error('Erro no callback OAuth2:', error.response?.data || error.message);
    return res.status(500).send('Erro na autenticação OAuth2.');
  }
});

// Rota principal - COM proteção
app.get('/', async (req, res) => {
  if (req.session?.user) {
    return res.sendFile(path.join(__dirname, 'dist', 'index.html'));
  }
  const authUrl = `${AUTH_URL}?response_type=code&client_id=${CLIENT_ID}&redirect_uri=${encodeURIComponent(REDIRECT_URI)}&scope=bbprofile`;
  return res.redirect(authUrl);
});

// Servir arquivos (CSS, JS, imagens) - SEM proteção para evitar loop
app.use(express.static(path.join(__dirname, 'dist')));

app.listen(PORT, () => {
  console.log(`Servidor rodando na porta ${PORT}`);
});
