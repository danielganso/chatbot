<system.webServer>
  <rewrite>
    <rules>
      <rule name="ReverseProxyInboundRule1" stopProcessing="true">
        <match url="(.*)" />
        <action type="Rewrite" url="http://localhost:3000/{R:1}" />
      </rule>
    </rules>
    <outboundRules>
      <rule name="ReverseProxyOutboundRule1" preCondition="ResponseIsRedirect">
        <match serverVariable="RESPONSE_Location" pattern="^http(s)?://superfeira.intranet.bb.com.br(.*)" />
        <action type="Rewrite" value="http{R:1}://login.intranet.bb.com.br{R:2}" />
      </rule>
      <preConditions>
        <preCondition name="ResponseIsRedirect">
          <add input="{RESPONSE_STATUS}" pattern="3.." />
        </preCondition>
      </preConditions>
    </outboundRules>
  </rewrite>
</system.webServer>



Request URL
https://superfeira.intranet.bb.com.br/sso/oauth2/authorize?response_type=code&client_id=superfeira&redirect_uri=https%3A%2F%2Fsuperfeira.intranet.bb.com.br%2Fauth%2Fcallback&scope=bbprofile
Request Method
GET
Status Code
302 Found
Remote Address
10.2.99.16:443
Referrer Policy
strict-origin-when-cross-origin

<configuration>
  <system.webServer>
    <rewrite>
      <rules>
        <rule name="ReverseProxyToNode" stopProcessing="true">
          <match url=".*" />
          <conditions logicalGrouping="MatchAll">
            <!-- Só proxyar se não for um arquivo físico -->
            <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
            <!-- Só proxyar se não for uma pasta física -->
            <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />
          </conditions>
          <action type="Rewrite" url="http://localhost:3000/{R:1}" />
        </rule>
      </rules>
    </rewrite>
  </system.webServer>
</configuration>

<configuration>
  <system.webServer>
    <rewrite>
      <rules>
        <rule name="ReverseProxyToNode" stopProcessing="true">
          <match url="(.*)" />
          <action type="Rewrite" url="http://localhost:3000/{R:1}" />
        </rule>
      </rules>
    </rewrite>
  </system.webServer>
</configuration>

https://superfeira.intranet.bb.com.br/sso/oauth2/authorize?response_type=code&client_id=superfeira&redirect_uri=https%3A%2F%2Fsuperfeira.intranet.bb.com.br%2Fauth%2Fcallback&scope=bbprofile

// test-server.js
const express = require('express');
const app = express();
const PORT = 3000;

app.get('*', (req, res) => {
  res.send(`🚀 Está funcionando! Rota acessada: ${req.originalUrl}`);
});

app.listen(PORT, () => {
  console.log(`Servidor de teste rodando em http://localhost:${PORT}`);
});


1111111111111111111111111111111111111

const express = require('express');
const axios = require('axios');
const path = require('path');
const cookieSession = require('cookie-session');
require('dotenv').config();

const app = express();
const PORT = 3000;

// Permite o Express funcionar corretamente atrás do IIS (evita erro no hostname)
app.set('trust proxy', true);

// ======= CONFIGURAÇÕES =========
const CLIENT_ID = process.env.CLIENT_ID;
const CLIENT_SECRET = process.env.CLIENT_SECRET;
const REDIRECT_URI = process.env.REDIRECT_URI;

const AUTH_BASE_URL = 'https://login.intranet.bb.com.br';
const AUTH_URL = `${AUTH_BASE_URL}/sso/oauth2/authorize`;
const TOKEN_URL = `${AUTH_BASE_URL}/sso/oauth2/access_token`;
const USERINFO_URL = `${AUTH_BASE_URL}/sso/oauth2/userinfo`;


// ======= SESSÃO VIA COOKIE ========
app.use(
  cookieSession({
    name: 'session',
    keys: ['chave-super-secreta-aqui'],
    maxAge: 24 * 60 * 60 * 1000, // 1 dia
    secure: true,
    sameSite: 'lax',
  })
);

// ======= ROTA PRINCIPAL ===========
app.get('/', async (req, res) => {
  if (req.session?.user) {
    // Se autenticado, mostra o index
    return res.sendFile(path.join(__dirname, 'dist', 'index.html'));
  }

  // Redireciona para o login do BB
  const authUrl = `${AUTH_URL}?response_type=code&client_id=${CLIENT_ID}&redirect_uri=${encodeURIComponent(REDIRECT_URI)}&scope=bbprofile`;
  return res.redirect(authUrl);
});

// ======= CALLBACK DO OAUTH2 =========
app.get('/auth/callback', async (req, res) => {
  const code = req.query.code;

  if (!code) {
    return res.status(400).send('Código de autenticação ausente.');
  }

  try {
    const authHeader = Buffer.from(`${CLIENT_ID}:${CLIENT_SECRET}`).toString('base64');

    const tokenResponse = await axios.post(
      TOKEN_URL,
      new URLSearchParams({
        code,
        grant_type: 'authorization_code',
        redirect_uri: REDIRECT_URI,
      }),
      {
        headers: {
          Authorization: `Basic ${authHeader}`,
          'Content-Type': 'application/x-www-form-urlencoded',
        },
      }
    );

    const accessToken = tokenResponse.data.access_token;

    // Pega os dados do usuário logado
    const userInfo = await axios.get(USERINFO_URL, {
      headers: { Authorization: `Bearer ${accessToken}` },
    });

    // Salva os dados na sessão
    req.session.user = userInfo.data;

    return res.redirect('/');
  } catch (error) {
    console.error('Erro no callback:', error.response?.data || error.message);
    return res.status(500).send('Erro na autenticação OAuth2.');
  }
});

// ======= BLOQUEIA ACESSOS SEM LOGIN =======
app.use((req, res, next) => {
  if (req.session?.user) {
    return next();
  }

  // Redireciona para login se tentar acessar outros arquivos sem sessão
  const authUrl = `${AUTH_URL}?response_type=code&client_id=${CLIENT_ID}&redirect_uri=${encodeURIComponent(REDIRECT_URI)}&scope=bbprofile`;
  return res.redirect(authUrl);
});

// ======= SERVE OS ARQUIVOS ESTÁTICOS =========
app.use(express.static(path.join(__dirname, 'dist')));

// ======= INICIA O SERVIDOR =========
app.listen(PORT, () => {
  console.log(`Servidor rodando em http://localhost:${PORT}`);
});

