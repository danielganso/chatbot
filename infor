require('dotenv').config()
const express = require('express')
const axios = require('axios')
const https = require('https')
const fs = require('fs')
const path = require('path')
const qs = require('qs')
const cookieParser = require('cookie-parser')

const app = express()
const port = process.env.PORT || 3000

// === HTTPS Agent com o certificado raiz ===
const caCertPath = path.resolve(__dirname, 'certs', 'bbraiz.crt')
const ca = fs.readFileSync(caCertPath)
const httpsAgent = new https.Agent({ ca, rejectUnauthorized: true })

// === URLs e credenciais do BB ===
const authUrl     = 'https://login.intranet.bb.com.br/sso/oauth2/authorize'
const tokenUrl    = 'https://login.intranet.bb.com.br/sso/oauth2/access_token'
const userInfoUrl = 'https://login.intranet.bb.com.br/sso/oauth2/userinfo'

const clientId     = process.env.CLIENT_ID
const clientSecret = process.env.CLIENT_SECRET
const redirectUri  = process.env.REDIRECT_URI  // ex: https://superfeira.intranet.bb.com.br/auth/callback/bb
const scope        = 'bbprofile'

// Pasta "dist" fica ao lado do server.js
const distPath = path.join(__dirname, 'dist')

// Cookie parser
app.use(cookieParser())

// Callback do BB — trata code, seta cookie e volta para "/"
app.get('/auth/callback/bb', async (req, res) => {
  const { code } = req.query
  if (!code) return res.status(400).send('Código de autorização ausente.')

  try {
    // Troca code por token
    const tokenResp = await axios.post(
      tokenUrl,
      qs.stringify({
        grant_type:   'authorization_code',
        code,
        redirect_uri: redirectUri
      }),
      {
        httpsAgent,
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Authorization': 'Basic ' +
            Buffer.from(${clientId}:${clientSecret}).toString('base64')
        }
      }
    )
    const accessToken = tokenResp.data.access_token

    // Opcional: buscar userinfo
    await axios.post(userInfoUrl, null, {
      httpsAgent,
      headers: { Authorization: Bearer ${accessToken} }
    })

    // Seta cookie e redireciona para raiz
    res.cookie('bb_token', accessToken, {
      httpOnly: true,
      secure:   true,
      sameSite: 'lax'
    })
    return res.redirect('/')
  }
  catch (err) {
    console.error('Erro no OAuth2:', err)
    return res.status(500).send('Erro ao autenticar com o BB: ' + err.message)
  }
})

// Middleware de proteção — antes de servir qualquer arquivo
app.use((req, res, next) => {
  // permite o callback passar
  if (req.path === '/auth/callback/bb') return next()
  // se não tiver cookie, manda direto pro SSO
  if (!req.cookies.bb_token) {
    const authQuery = new URLSearchParams({
      response_type: 'code',
      client_id:     clientId,
      redirect_uri:  redirectUri,
      scope
    }).toString()
    return res.redirect(${authUrl}?${authQuery})
  }
  next()
})

// Serve sua SPA (index.html + assets) direto da pasta dist, na raiz
app.use(express.static(distPath))

app.listen(port, () => {
  console.log(Servidor rodando em http://localhost:${port})
})






























require('dotenv').config()
const express = require('express')
const axios = require('axios')
const https = require('https')
const fs = require('fs')
const path = require('path')
const qs = require('qs')

const app = express()
const port = process.env.PORT || 3000

// === HTTPS Agent com o certificado raiz ===
const caCertPath = path.resolve(__dirname, 'certs', 'bbraiz.crt')
const ca = fs.readFileSync(caCertPath)
const httpsAgent = new https.Agent({ ca, rejectUnauthorized: true })

// === URLs e credenciais do BB ===
const authUrl     = 'https://login.intranet.bb.com.br/sso/oauth2/authorize'
const tokenUrl    = 'https://login.intranet.bb.com.br/sso/oauth2/access_token'
const userInfoUrl = 'https://login.intranet.bb.com.br/sso/oauth2/userinfo'

const clientId     = process.env.CLIENT_ID
const clientSecret = process.env.CLIENT_SECRET
const redirectUri  = process.env.REDIRECT_URI  // ex: https://seu-dominio/auth/callback/bb
const scope        = 'bbprofile'

// Pasta dist fica ao lado de server.js
const distPath = path.join(__dirname, 'dist')

// 1) Rota raiz: inicia o login no BB
app.get('/', (req, res) => {
  const authQuery = new URLSearchParams({
    response_type: 'code',
    client_id:     clientId,
    redirect_uri:  redirectUri,
    scope
  }).toString()
  res.redirect(`${authUrl}?${authQuery}`)
})

// 2) Callback do BB: troca code→token, busca userinfo e entrega o index.html da sua SPA
app.get('/auth/callback/bb', async (req, res) => {
  const { code } = req.query
  if (!code) return res.status(400).send('Código de autorização ausente.')

  try {
    const tokenResp = await axios.post(
      tokenUrl,
      qs.stringify({
        grant_type:   'authorization_code',
        code,
        redirect_uri: redirectUri
      }),
      {
        httpsAgent,
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Authorization': 'Basic ' +
            Buffer.from(`${clientId}:${clientSecret}`).toString('base64')
        }
      }
    )
    const accessToken = tokenResp.data.access_token

    // opcional: consulta userinfo
    await axios.post(
      userInfoUrl,
      null,
      { httpsAgent, headers: { Authorization: `Bearer ${accessToken}` } }
    )

    // **aqui** entregamos o index.html diretamente
    res.sendFile(path.join(distPath, 'index.html'))
  }
  catch (err) {
    console.error('Erro no OAuth2:', err)
    res.status(500).send('Erro ao autenticar com o BB: ' + err.message)
  }
})

// 3) Depois, serve todos os assets estáticos (JS, CSS, imagens)
app.use(express.static(distPath))

app.listen(port, () => {
  console.log(`Servidor rodando em http://localhost:${port}`)
})









-==================================

teste 2

require('dotenv').config()
const express = require('express')
const axios = require('axios')
const https = require('https')
const fs = require('fs')
const path = require('path')
const qs = require('qs')

const app = express()
const port = process.env.PORT || 3000

// === HTTPS Agent com o certificado raiz ===
const caCertPath = path.resolve(__dirname, 'certs', 'bbraiz.crt')
const ca = fs.readFileSync(caCertPath)
const httpsAgent = new https.Agent({ ca, rejectUnauthorized: true })

// === URLs e credenciais do BB ===
const authUrl     = 'https://login.intranet.bb.com.br/sso/oauth2/authorize'
const tokenUrl    = 'https://login.intranet.bb.com.br/sso/oauth2/access_token'
const userInfoUrl = 'https://login.intranet.bb.com.br/sso/oauth2/userinfo'

const clientId     = process.env.CLIENT_ID
const clientSecret = process.env.CLIENT_SECRET
const redirectUri  = process.env.REDIRECT_URI    // ex: https://superfeira.intranet.bb.com.br/auth/callback/bb
const scope        = 'bbprofile'

// caminho para a sua pasta dist (fica ao lado do server.js)
const distPath = path.join(__dirname, 'dist')

// 1) rota de login — quem acessar /login é mandado pro SSO do BB
app.get('/login', (req, res) => {
  const authQuery = new URLSearchParams({
    response_type: 'code',
    client_id:     clientId,
    redirect_uri:  redirectUri,
    scope
  }).toString()
  res.redirect(`${authUrl}?${authQuery}`)
})

// 2) callback do BB — troca code→token, busca userinfo e redireciona pra raiz
app.get('/auth/callback/bb', async (req, res) => {
  const { code } = req.query
  if (!code) {
    return res.status(400).send('Código de autorização ausente.')
  }

  try {
    // troca o code pelo access_token
    const tokenResp = await axios.post(
      tokenUrl,
      qs.stringify({
        grant_type:   'authorization_code',
        code,
        redirect_uri: redirectUri
      }),
      {
        httpsAgent,
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Authorization': 'Basic ' +
            Buffer.from(`${clientId}:${clientSecret}`).toString('base64')
        }
      }
    )
    const accessToken = tokenResp.data.access_token

    // (opcional) ler userinfo
    await axios.post(userInfoUrl, null, {
      httpsAgent,
      headers: { Authorization: `Bearer ${accessToken}` }
    })

    // **aqui**: volta pra raiz — Browser URL fica só "https://superfeira.intranet.bb.com.br/"
    res.redirect('/')
  }
  catch (err) {
    console.error('Erro no OAuth2:', err)
    res.status(500).send('Erro ao autenticar com o BB: ' + err.message)
  }
})

// 3) serve tudo de dist na raiz (/)
//    -- GET / => dist/index.html
//    -- GET /main.js, /styles.css, /assets/... => dist/main.js, etc
app.use(express.static(distPath))

app.listen(port, () => {
  console.log(`Servidor rodando em http://localhost:${port}`)
})




=============================================
TESTE 3
require('dotenv').config()
const express = require('express')
const axios = require('axios')
const https = require('https')
const fs = require('fs')
const path = require('path')
const qs = require('qs')
const cookieParser = require('cookie-parser')

const app = express()
const port = process.env.PORT || 3000

// === HTTPS Agent com o certificado raiz ===
const caCertPath = path.resolve(__dirname, 'certs', 'bbraiz.crt')
const ca = fs.readFileSync(caCertPath)
const httpsAgent = new https.Agent({ ca, rejectUnauthorized: true })

// === URLs e credenciais do BB ===
const authUrl     = 'https://login.intranet.bb.com.br/sso/oauth2/authorize'
const tokenUrl    = 'https://login.intranet.bb.com.br/sso/oauth2/access_token'
const userInfoUrl = 'https://login.intranet.bb.com.br/sso/oauth2/userinfo'

const clientId     = process.env.CLIENT_ID
const clientSecret = process.env.CLIENT_SECRET
const redirectUri  = process.env.REDIRECT_URI  // ex: https://superfeira.intranet.bb.com.br/auth/callback/bb
const scope        = 'bbprofile'

// Pasta "dist" fica ao lado do server.js
const distPath = path.join(__dirname, 'dist')

// Cookie parser
app.use(cookieParser())

// Callback do BB — trata code, seta cookie e volta para "/"
app.get('/auth/callback/bb', async (req, res) => {
  const { code } = req.query
  if (!code) return res.status(400).send('Código de autorização ausente.')

  try {
    // Troca code por token
    const tokenResp = await axios.post(
      tokenUrl,
      qs.stringify({
        grant_type:   'authorization_code',
        code,
        redirect_uri: redirectUri
      }),
      {
        httpsAgent,
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Authorization': 'Basic ' +
            Buffer.from(`${clientId}:${clientSecret}`).toString('base64')
        }
      }
    )
    const accessToken = tokenResp.data.access_token

    // Opcional: buscar userinfo
    await axios.post(userInfoUrl, null, {
      httpsAgent,
      headers: { Authorization: `Bearer ${accessToken}` }
    })

    // Seta cookie e redireciona para raiz
    res.cookie('bb_token', accessToken, {
      httpOnly: true,
      secure:   true,
      sameSite: 'lax'
    })
    return res.redirect('/')
  }
  catch (err) {
    console.error('Erro no OAuth2:', err)
    return res.status(500).send('Erro ao autenticar com o BB: ' + err.message)
  }
})

// Middleware de proteção — antes de servir qualquer arquivo
app.use((req, res, next) => {
  // permite o callback passar
  if (req.path === '/auth/callback/bb') return next()
  // se não tiver cookie, manda direto pro SSO
  if (!req.cookies.bb_token) {
    const authQuery = new URLSearchParams({
      response_type: 'code',
      client_id:     clientId,
      redirect_uri:  redirectUri,
      scope
    }).toString()
    return res.redirect(`${authUrl}?${authQuery}`)
  }
  next()
})

// Serve sua SPA (index.html + assets) direto da pasta dist, na raiz
app.use(express.static(distPath))

app.listen(port, () => {
  console.log(`Servidor rodando em http://localhost:${port}`)
})


























=============================
require('dotenv').config();
const express = require('express');
const axios = require('axios');
const https = require('https');
const fs = require('fs');
const path = require('path');
const qs = require('qs');

const app = express();
const port = process.env.PORT || 3000;

// === HTTPS Agent com o certificado raiz ===
const caCertPath = path.resolve(__dirname, 'certs', 'bbraiz.crt');
const ca = fs.readFileSync(caCertPath);
const httpsAgent = new https.Agent({
  ca,
  rejectUnauthorized: true
});

// === URLs e credenciais do BB ===
const authUrl = 'https://login.intranet.bb.com.br/sso/oauth2/authorize';
const tokenUrl = 'https://login.intranet.bb.com.br/sso/oauth2/access_token';
const userInfoUrl = 'https://login.intranet.bb.com.br/sso/oauth2/userinfo';

const clientId = process.env.CLIENT_ID;
const clientSecret = process.env.CLIENT_SECRET;
const redirectUri = process.env.REDIRECT_URI;
const scope = 'bbprofile'; // escopo conforme seu ambiente

app.get('/', (req, res) => {
  const authQuery = new URLSearchParams({
    response_type: 'code',
    client_id: clientId,
    redirect_uri: redirectUri,
    scope,
  }).toString();

  res.redirect(`${authUrl}?${authQuery}`);
});


// === Callback do BB ===
app.get('/auth/callback/bb', async (req, res) => {
  const { code } = req.query;

  if (!code) {
    return res.status(400).send('Código de autorização ausente.');
  }

  try {
    // === Troca o code pelo token ===
    const tokenResponse = await axios.post(tokenUrl, qs.stringify({
      grant_type: 'authorization_code',
      code,
      redirect_uri: redirectUri,
    }), {
      httpsAgent,
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Authorization': 'Basic ' + Buffer.from(`${clientId}:${clientSecret}`).toString('base64'),
      }
    });

    const accessToken = tokenResponse.data.access_token;

    // === Consulta o userinfo ===
    const userInfoResponse = await axios.post(userInfoUrl, null, {
      httpsAgent,
      headers: {
        Authorization: `Bearer ${accessToken}`,
      }
    });

    const userInfo = userInfoResponse.data;
    res.send(`<h1>Autenticado com sucesso!</h1><pre>${JSON.stringify(userInfo, null, 2)}</pre>`);

  } catch (err) {
    console.error('Erro no fluxo OAuth2:', err.message);
    res.status(500).send('Erro ao autenticar com o BB: ' + err.message);
  }
});

app.listen(port, () => {
  console.log(`Servidor rodando em http://localhost:${port}`);
});
