require('dotenv').config()
const express = require('express')
const axios = require('axios')
const https = require('https')
const fs = require('fs')
const path = require('path')
const qs = require('qs')

const app = express()
const port = process.env.PORT || 3000

// === HTTPS Agent com o certificado raiz ===
const caCertPath = path.resolve(__dirname, 'certs', 'bbraiz.crt')
const ca = fs.readFileSync(caCertPath)
const httpsAgent = new https.Agent({
  ca,
  rejectUnauthorized: true
})

// === URLs e credenciais do BB ===
const authUrl     = 'https://login.intranet.bb.com.br/sso/oauth2/authorize'
const tokenUrl    = 'https://login.intranet.bb.com.br/sso/oauth2/access_token'
const userInfoUrl = 'https://login.intranet.bb.com.br/sso/oauth2/userinfo'

const clientId     = process.env.CLIENT_ID
const clientSecret = process.env.CLIENT_SECRET
const redirectUri  = process.env.REDIRECT_URI   // ex: https://seu-dominio/auth/callback/bb
const scope        = 'bbprofile'                // seu escopo

// Pasta "dist" fica ao lado do server.js
const distPath = path.join(__dirname, 'dist')

// 1) rota raiz: inicia o SSO
app.get('/', (req, res) => {
  const authQuery = new URLSearchParams({
    response_type: 'code',
    client_id:     clientId,
    redirect_uri:  redirectUri,
    scope
  }).toString()
  res.redirect(`${authUrl}?${authQuery}`)
})

// 2) callback do BB: troca code→token, faz userinfo e entrega o index.html
app.get('/auth/callback/bb', async (req, res) => {
  const { code } = req.query
  if (!code) {
    return res.status(400).send('Código de autorização ausente.')
  }

  try {
    // troca code por token
    const tokenResp = await axios.post(
      tokenUrl,
      qs.stringify({
        grant_type:   'authorization_code',
        code,
        redirect_uri: redirectUri
      }),
      {
        httpsAgent,
        headers: {
          'Content-Type':  'application/x-www-form-urlencoded',
          'Authorization': 'Basic ' +
            Buffer.from(`${clientId}:${clientSecret}`).toString('base64')
        }
      }
    )
    const accessToken = tokenResp.data.access_token

    // opcional: buscar userinfo
    await axios.post(
      userInfoUrl,
      null,
      {
        httpsAgent,
        headers: { Authorization: `Bearer ${accessToken}` }
      }
    )

    // entrega sua SPA diretamente
    return res.sendFile(path.join(distPath, 'index.html'))
  }
  catch (err) {
    console.error('Erro no OAuth2:', err)
    return res.status(500).send('Erro ao autenticar com o BB: ' + err.message)
  }
})

// 3) serve todo o resto de dist (JS/CSS/assets) na raiz
app.use(express.static(distPath))

// fallback para qualquer rota SPA (caso você use React Router etc)
app.get('*', (req, res) => {
  res.sendFile(path.join(distPath, 'index.html'))
})

app.listen(port, () => {
  console.log(`Servidor rodando em http://localhost:${port}`)
})


HRESULT: 0x2
HTTP status: 500
HTTP subStatus: 1002
HTTP reason: Internal Server Error

You are receiving this HTTP 200 response because system.webServer/iisnode/@devErrorsEnabled configuration setting is 'true'.

In addition to the log of stdout and stderr of the node.exe process, consider using debugging and ETW traces to further diagnose the problem.

The last 64k of the output generated by the node.exe process to stderr is shown below:

Application has thrown an uncaught exception and is terminated:
TypeError: Missing parameter name at 1: https://git.new/pathToRegexpError
    at name (C:\workspace\devSuperfsa\node_modules\path-to-regexp\dist\index.js:73:19)
    at lexer (C:\workspace\devSuperfsa\node_modules\path-to-regexp\dist\index.js:91:27)
    at lexer.next (<anonymous>)
    at Iter.peek (C:\workspace\devSuperfsa\node_modules\path-to-regexp\dist\index.js:106:38)
    at Iter.tryConsume (C:\workspace\devSuperfsa\node_modules\path-to-regexp\dist\index.js:112:28)
    at Iter.text (C:\workspace\devSuperfsa\node_modules\path-to-regexp\dist\index.js:128:30)
    at consume (C:\workspace\devSuperfsa\node_modules\path-to-regexp\dist\index.js:152:29)
    at parse (C:\workspace\devSuperfsa\node_modules\path-to-regexp\dist\index.js:183:20)
    at C:\workspace\devSuperfsa\node_modules\path-to-regexp\dist\index.js:294:74
    at Array.map (<anonymous>)


















=============================
require('dotenv').config();
const express = require('express');
const axios = require('axios');
const https = require('https');
const fs = require('fs');
const path = require('path');
const qs = require('qs');

const app = express();
const port = process.env.PORT || 3000;

// === HTTPS Agent com o certificado raiz ===
const caCertPath = path.resolve(__dirname, 'certs', 'bbraiz.crt');
const ca = fs.readFileSync(caCertPath);
const httpsAgent = new https.Agent({
  ca,
  rejectUnauthorized: true
});

// === URLs e credenciais do BB ===
const authUrl = 'https://login.intranet.bb.com.br/sso/oauth2/authorize';
const tokenUrl = 'https://login.intranet.bb.com.br/sso/oauth2/access_token';
const userInfoUrl = 'https://login.intranet.bb.com.br/sso/oauth2/userinfo';

const clientId = process.env.CLIENT_ID;
const clientSecret = process.env.CLIENT_SECRET;
const redirectUri = process.env.REDIRECT_URI;
const scope = 'bbprofile'; // escopo conforme seu ambiente

app.get('/', (req, res) => {
  const authQuery = new URLSearchParams({
    response_type: 'code',
    client_id: clientId,
    redirect_uri: redirectUri,
    scope,
  }).toString();

  res.redirect(`${authUrl}?${authQuery}`);
});


// === Callback do BB ===
app.get('/auth/callback/bb', async (req, res) => {
  const { code } = req.query;

  if (!code) {
    return res.status(400).send('Código de autorização ausente.');
  }

  try {
    // === Troca o code pelo token ===
    const tokenResponse = await axios.post(tokenUrl, qs.stringify({
      grant_type: 'authorization_code',
      code,
      redirect_uri: redirectUri,
    }), {
      httpsAgent,
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Authorization': 'Basic ' + Buffer.from(`${clientId}:${clientSecret}`).toString('base64'),
      }
    });

    const accessToken = tokenResponse.data.access_token;

    // === Consulta o userinfo ===
    const userInfoResponse = await axios.post(userInfoUrl, null, {
      httpsAgent,
      headers: {
        Authorization: `Bearer ${accessToken}`,
      }
    });

    const userInfo = userInfoResponse.data;
    res.send(`<h1>Autenticado com sucesso!</h1><pre>${JSON.stringify(userInfo, null, 2)}</pre>`);

  } catch (err) {
    console.error('Erro no fluxo OAuth2:', err.message);
    res.status(500).send('Erro ao autenticar com o BB: ' + err.message);
  }
});

app.listen(port, () => {
  console.log(`Servidor rodando em http://localhost:${port}`);
});
